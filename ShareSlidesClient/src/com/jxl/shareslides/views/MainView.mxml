<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="100%"
		 creationComplete="init()" 
		 currentState="connecting"
		 xmlns:ns="http://com.projectcocoon.p2p" 
		 xmlns:skins="com.jxl.shareslides.skins.*" 
		 xmlns:local="*" 
		 xmlns:controls="com.jxl.shareslides.controls.*" xmlns:rl="com.jxl.shareslides.rl.*"
		 xmlns:views="com.jxl.shareslides.views.*">
	
	<fx:Script>
		<![CDATA[
			import com.jxl.shareslides.controls.SendSlidesWindow;
			import com.jxl.shareslides.events.view.MainViewEvent;
			import com.jxl.shareslides.events.view.SlideshowItemRendererEvent;
			import com.jxl.shareslides.vo.SlideshowVO;
			import com.projectcocoon.p2p.events.ClientEvent;
			import com.projectcocoon.p2p.events.MessageEvent;
			import com.projectcocoon.p2p.events.ObjectEvent;
			import com.projectcocoon.p2p.vo.ObjectMetadataVO;
			
			import mx.collections.ArrayCollection;
			import mx.events.CollectionEvent;

			import spark.components.Window;
			
			
			

			private var _sharedSlideshows:ArrayCollection;
			private var sharedSlideshowDirty:Boolean = false;

			[Bindable]
			public function get sharedSlideshows():ArrayCollection { return _sharedSlideshows; }
			public function set sharedSlideshows(value:ArrayCollection):void
			{
				if(value)
					Debug.debug("MainView::sharedSlideshows setter, value.length: " + value.length);

				if(_sharedSlideshows)
				{
					_sharedSlideshows.removeEventListener(CollectionEvent.COLLECTION_CHANGE, onChange);
				}
				_sharedSlideshows = value;
				if(_sharedSlideshows)
				{
					_sharedSlideshows.addEventListener(CollectionEvent.COLLECTION_CHANGE, onChange);
				}
				sharedSlideshowDirty = true;
				invalidateProperties();
			}

			private function onChange(event:CollectionEvent):void
			{
				Debug.debug("onChange: " + _sharedSlideshows.length);
			}

			[Bindable]
			public var otherSlideshows:ArrayCollection;
			
			// channel.clients
			[Bindable]
			public var clients:ArrayCollection;

			public function gotoSection(location:String):void
			{
				switch(location)
				{
					case "Slideshows":
						currentState = "choose";
						break;
					
					case "Create":
						currentState = "create";
						break;
				}
			}
			
			public function setConnected(connected:Boolean):void
			{
				if(connected)
				{
					if(currentState == "connecting" || currentState == "disconnected")
						currentState = "choose";
				}
				else
				{
					if(currentState != "connecting")
						currentState = "disconnected";
				}
			}
			
			private function init():void
			{
				registerClassAlias("com.jxl.shareslides.vo.SlideshowVO", SlideshowVO);
				
				move((Screen.mainScreen.bounds.width / 2) - (width / 2), (Screen.mainScreen.bounds.height / 2) - (height / 2));

				Debug.log("MainView::init");
				/*
				var shareWin:SendSlidesWindow = new SendSlidesWindow();
				shareWin.open();
				shareWin.move(Screen.mainScreen.bounds.width - Screen.mainScreen.bounds.x - shareWin.width, 0);
				*/
			}
			
			
			private function onJoinSlideshow(event:SlideshowItemRendererEvent):void
			{
				currentState = "slideshow";
				var evt:MainViewEvent = new MainViewEvent(MainViewEvent.JOIN_SLIDESHOW);
				evt.slideshow = event.slideshow;
				dispatchEvent(evt);
			}
			

			

			
			// utility
			private function containsSlideshow(slideshowName:String):Boolean
			{
				/*
				if(channel.receivedObjects == null)
					return false;
				
				var len:int = channel.receivedObjects.length;
				while(len--)
				{
					var om:ObjectMetadataVO = channel.receivedObjects.getItemAt(len) as ObjectMetadataVO;
					if(om.info as String == slideshowName)
					{
						return true;
					}
				}
				
				return false;
				*/
				return false;
			}
			

			
		]]>
	</fx:Script>
	
	
	<s:states>
	<s:State name="connecting" />
	<s:State name="choose" />
	<s:State name="slideshow" />
	<s:State name="create" />
	<s:State name="disconnected" />
	</s:states>
	
	<s:layout>
		<s:BasicLayout />
	</s:layout>
	
	
	<s:VGroup width="100%" height="100%" includeIn="choose">
		<controls:TextHeader label="Shared Slideshows" />
		<controls:SlideshowList dataProvider="{sharedSlideshows}"
								joinSlideshow="onJoinSlideshow(event)"/>
		<controls:TextHeader label="Other Slideshows" />
		<controls:SlideshowList dataProvider="{otherSlideshows}"
								joinSlideshow="onJoinSlideshow(event)"/>
		<controls:TextHeader label="Connected Participants" />
		<controls:PhoneList dataProvider="{clients}" />
	</s:VGroup>
	
	<controls:BackToSlideshowButton includeIn="slideshow" 
		click="currentState = 'choose'"
		left="8" top="8"/>
	
	<views:SlideshowView includeIn="slideshow" />

	<views:CreateSlideshowView includeIn="create" />

	
</s:Group>
